demo()
install.packages( c("MASS", "openintro", "GGally", "Hmisc", "mosaic", "rmarkdown", "car", "gridExtra", "tidyverse", "ggformula") )
mydata <- read.csv("http://statistics.uchicago.edu/~collins/stat234/data/sevengr.csv")
View(mydata)
glimpse(mydata)
library(mosaic)
library(knitr)
library(tidyverse)
library(ggformula)
library(gridExtra)
library(broom)
glimpse(mydata)
install.packages( c( "ggmap"))
#clean environment
rm(list = ls())
#to get current working directory
getwd()
#import csv
df <- read.csv("datasets/tv_hurricanes_by_network.csv")
str(df)
names(df)
names(df)[2] <- "HURRICANE"
names(df)[names(df)=="HURRICANE"] <- "Hurricane"
names(df)
View(df)
View(df)
df$Costs[df$Hurricane=="Hurricane Harvey"]<-125000
install.packages("dplyr")
library(dplyr)
head(dplyr::select(df, Date, CNN), 3)
df$Costs[df$Hurricane=="Hurricane Harvey"] <- 125 * 1000
df$Costs[df$Hurricane=="Hurricane Harvey"] <- 125 * 1000
df$Costs[df$Hurricane=="Hurricane Irma"] <- 64.8 * 1000
df$Costs[df$Hurricane=="Hurricane Maria"] <- 90 * 1000
df$Costs[df$Hurricane=="Hurricane Jose"] <- 2.8
df %>%
df %>%
filter(costs>10) %>%
group_by(Hurricane) %>%
summarise(mean.coverage=mean(MSNBC)) %>%
arrange(mean.coverage)
df %>%
filter(Costs > 10) %>%
group_by(Hurricane) %>%
summarise(max.coverage = max(MSNBC)) %>%
arrange(max.coverage)
df %>%
filter(costs>10) %>%
group_by(Hurricane) %>%
summarise(mean.coverage= mean(MSNBC)) %>%
arrange(mean.coverage)
df %>%
filter(Costs>10) %>%
group_by(Hurricane) %>%
summarise(mean.coverage= mean(MSNBC)) %>%
arrange(mean.coverage)
install.packages("tidyr")
plot_df <- gather(df,
key = "tv.station", #name of the new column of 'old columns to be gathered'
value = "coverage", #name of the 'gathered values'
BBC.News:MSNBC) #columns to be 'gathered'
plot_df <- gather(df,
key = "tv.station", #name of the new column of 'old columns to be gathered'
value = "coverage", #name of the 'gathered values'
BBC.News:MSNBC)
library(tidyr)
plot_df <- gather(df,
key = "tv.station", #name of the new column of 'old columns to be gathered'
value = "coverage", #name of the 'gathered values'
BBC.News:MSNBC)
head(spread(plot_df, tv.station, coverage), 3)
test_var <- seq(1, 1000000, 1)
head(test_var)
#check if it is a vector
is.vector(test_var)
test_var2 <- test_var
#start the clock
time_forloop <- proc.time()
#loop through each element in test_var and square it
for (i in test_var) {
test_var2[i] <- i^2
}
#stop the clock
proc.time() - time_forloop
time_vectorized <- proc.time()
#apply it to the vector
test_var2 <- test_var^2
#stop the clock
proc.time() - time_vectorized
test_var <- as.list(seq(1, 1000000, 1))
head(test_var, 3)
#check if it is a list
is.list(test_var)
#try 'squaring' the list
test_var2 <- test_var^2
temp.convert <- function(temp.C) {
temp.F <- temp.C*1.8 + 32
print(paste0(temp.C, "C is equivalent to ", temp.F, "F"))
}
temp.list <- list(30, 20, 39, 10, -1, -7, -8, -9)
install.packages("purrr")
install.packages("purrr")
library(purrr)
library("purrr")
install.packages("purrr")
library("purrr")
temps.converted <- map(.x = temp.list, .f = temp.convert)
class(temps.converted)
temp.vector <- c(30, 20, 39, 10, -1, -7, -8, -9)
temps.converted2 <- map_chr(.x = temp.vector, .f = temp.convert)
is.list(temps.converted2)
#check if temps.converted2 is a vector
is.vector(temps.converted2)
#what type of vector is temps.converted2?
class(temps.converted2)
install.packages ("scales")
install.packages ("ggplot2")
library(ggplot2)
library(scales)
head(plot_df)
ggplot(data = plot_df) +
geom_density(aes(x = coverage, fill = tv.station), alpha = 0.3) +
xlab("news coverage")  #label the x axis
ggplot(data = plot_df) +
geom_line(aes(x = as.Date(Date, "%m/%d/%y"), y = coverage,
group = tv.station,
color = tv.station), alpha = 0.7) +
xlab("date") +
scale_x_date(labels = date_format("%m/%d"),
breaks = date_breaks("1 week"))
ggplot(data = plot_df) +
geom_line(aes(x = as.Date(Date, "%m/%d/%y"), y = coverage,
group = tv.station,
color = tv.station), alpha = 0.7) +
xlab("date") +
scale_x_date(labels = date_format("%m/%d"),
breaks = date_breaks("1 week"))
ggplot(data = plot_df) +
geom_density(aes(x = coverage, fill = tv.station), alpha = 0.3) +
xlab("news coverage")  #label the x axis
ggplot(data = plot_df) +
geom_density(aes(x = coverage, fill = tv.station), alpha = 0.3) +
xlab("news coverage")  #label the x axis
ggplot(data = plot_df) +
geom_line(aes(x = as.Date(Date, "%m/%d/%y"), y = coverage,
group = tv.station,
color = tv.station), alpha = 0.7) +
xlab("date") +
scale_x_date(labels = date_format("%m/%d"),
breaks = date_breaks("1 week"))
rm(list = ls())
library(sf)
library(dplyr)
library(readr)
library(ggplot2)
library(mapview)
install.packages(mapview)
install.packages("mapview")
library(mapview)
library(mapview)
library(lubridate)
setwd("C:\Users\Dylan Hogan\Dropbox\epic_predoc_resources\epic_orientation\data\Spatial_palo_alto")
getwd()
setwd(..)
setwd("C:/Users/Dylan Hogan/Dropbox/epic_predoc_resources/epic_orientation/data/Spatial_palo_alto")
pa_f <-
file.path(ddir, "palo_alto_freeways.shp") %>%
st_read(stringsAsFactors = F) %>%
st_transform(utm_crs)
pa_f <-
file.path("palo_alto_freeways.shp") %>%
st_read(stringsAsFactors = F) %>%
st_transform(utm_crs)
pa_f <-
file.path("palo_alto_freeways.shp") %>%
st_read(stringsAsFactors = F)
pa <-
file.path("palo_alto.shp") %>%
st_read(stringsAsFactors = F)
plot_pa %>%
ggplot() +
geom_sf() +
geom_sf(data = pa) +
ggtitle("Neighbourhood Polygons") +
theme_nothing()
View(pa)
View(pa)
pa %>%
ggplot() +
geom_sf() +
geom_sf(data = PrCplnc) +
ggtitle("test") +
theme_nothing()
theme_nothing <- function(base_size = 12, title_size = 15){
return(
theme(panel.grid.major = element_line(colour = "transparent"),
panel.grid.minor = element_line(colour = "transparent"),
panel.background = element_blank(), axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(size = title_size, hjust = 0.5),
plot.caption = element_text(size = 6)))
}
pa %>%
ggplot() +
geom_sf() +
ggtitle("test") +
theme_nothing()
pa_f %>%
ggplot() +
geom_sf() +
ggtitle("test") +
theme_nothing()
pa_f %>%
ggplot() +
geom_sf() +
ggtitle("test") +
theme_nothing()
pa %>%
ggplot() +
geom_sf() +
ggtitle("test") +
theme_nothing()
pa_f %>%
ggplot() +
geom_sf() +
ggtitle("test") +
theme_nothing() +
pa %>%
ggplot() +
geom_sf() +
ggtitle("test") +
theme_nothing()
pa_f %>%
ggplot() +
geom_sf() +
geom_sf(data = pa) +
ggtitle("test") +
theme_nothing()
View(pa_f)
View(pa_f)
View(pa)
View(pa)
per_capita_map <-
pa %>%
ggplot() +
geom_sf(aes(fill = PrCplnc)) +
theme_nothing() +
scale_fill_continuous(low = "#fee0d2", high = "#67000d") +
ggtitle("clor test")
per_capita_map <-
pa %>%
ggplot() +
geom_sf(aes(fill = PrCplnc)) +
theme_nothing() +
scale_fill_continuous(low = "#fee0d2", high = "#67000d") +
ggtitle("clor test")
pa_map <-
pa %>%
ggplot() +
geom_sf(aes(fill = PrCplnc)) +
theme_nothing() +
scale_fill_continuous(low = "#fee0d2", high = "#67000d") +
ggtitle("clor test")
pa
pa %>%
ggplot() +
geom_sf(aes(fill = PrCplnc))
pa %>%
ggplot() +
geom_sf(aes(fill = PrCplnc)) +
theme_nothing() +
scale_fill_continuous(low = "#fee0d2", high = "#67000d") +
ggtitle("clor test")
pa %>%
ggplot() +
geom_sf(aes(fill = PrCplnc)) +
theme_nothing() +
scale_fill_continuous(low = "#fee0d2", high = "#67000d") +
ggtitle("clor test")
pa_map <-
pa %>%
ggplot() +
geom_sf(aes(fill = PrCplnc)) +
theme_nothing() +
scale_fill_continuous(low = "#fee0d2", high = "#67000d") +
ggtitle("clor test")
pa_map
pa_map <-
pa %>%
ggplot() +
geom_sf(aes(fill = PrCpInc)) +
theme_nothing() +
scale_fill_continuous(low = "#fee0d2", high = "#67000d") +
ggtitle("clor test")
pa_map
