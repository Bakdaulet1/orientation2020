#+TITLE: Bash and command-line tools
#+AUTHOR: Ivan Higuera-Mendieta
#+OPTIONS: H:2 toc:t num:t

** Why should I care? 

Most of our coding life, we have worked in IDEs (i.e. RStudio, Stata, etc.) that have help us to
simplfy most of our software development work. But sometimes IDEs are not configurable enough, we
have to work on remote servers, or simply we need a more personalized space to work.

Working in black (or white) terminals seems like a daunting place, but here we will learn how to
feel confortable in the command-line, running basic scripts, and personalize our ~dotfiles~ to make
our terminal a nice place to live. 

** The ghost in the shell

/Shell? Bash?/ Computers run several tasks behind courtains. Nowadays, we use graphic interfaces
(GUIs) for running tasks, read our email, and navigate the web. But graphic interfaces are nothing
less than a mediator between us and the Shell, a program that runs other programms. *Bash* (Bourne
Against Shell) is Unix shell, and it will be ubiquitous from now on (even Windows is using a Unix
shell).
 

** Basics: where am I?

Commands -programs, actually- are always run after the ~$~ prompt. This is list of basic questions
that the command-line can answer:
 - Who am I? (~whoami~)
 - Where am I? (~pwd~)
 - What's the world made of? (~ls~)
 - What the hell is happening? (~top~ or ~htop~)
 - Take me to a nice place! (~cd~) 

#+BEGIN_SRC bash :exports both :results value
whoami
#+END_SRC

#+RESULTS:
: topcat

#+BEGIN_SRC bash :exports both :results value
pwd
#+END_SRC

#+RESULTS:
: /Users/topcat/epic/orientation2019/bash

Programs have options (and a lot of documentation), we can explore program options by using the
~man~ command. Try ~man ls~. Some programs do not have any documentation, so check the internet for
their documentation, or ~<command> --help~.  

** Basics: moving around tips

Bash has some shortcuts for doing our life easier. For instance:

 #+BEGIN_SRC bash :exports both :results value
 cd epic/ok-computer
 pwd
#+END_SRC

#+RESULTS:
: /Users/topcat/epic/ok-computer

 #+BEGIN_SRC bash :exports both :results value
cd ../.. 
pwd
#+END_SRC

#+RESULTS:
: /Users/topcat/epic

 - A semicolon can concatenate (not pipe, more on that later) two commands.
 - ~..~ means going back one level. Hence, ~../..~ will send us back two levels
 - In case we want to go back to the root folder /Users/<user>, you can try cd ~
 
** Basics: File management I

We can create new files and directories by using the mkdir and touch commands. Lets create the
epic_dir directory, and then a text.txt file. 

#+BEGIN_SRC bash
mkdir ~/epic_dir
touch ~/epic_dir/test.txt
#+END_SRC 

Now check that the directroy and the file were creating by using ls. One common file tasks is
copying or moving files or directories. The mv and cp commands will help us with that. mv is
able to move complete directories. Both commands allow you to rename the file in the new
destination, or you can use . to use the same name. Check man cp for more on this.  

Now check that the directroy and the file were creating by using ls. One common file tasks is
copying or moving files or directories. The mv and cp commands will help us with that. mv is
able to move complete directories, but not cp.

#+BEGIN_SRC bash 
cp epic_dir/test.txt test_copy.txt
#+END_SRC 

*Task:* /Find how to copy directories/

** Basics: File management II

Let's assume that we do not need our recently created files anymore. The rm command will help us to
delete files or directories. The use of rm is simple, but be careful! rm has big powers, and
with a big power comes a big responsability. Deleted files by rm *cannot* be restored again.

#+BEGIN_SRC bash
rm epic_dir/test.txt
#+END_SRC 

Now remove the directory with the same command. You should get an error:

#+BEGIN_SRC bash :results value :exports both
rm epic_dir/
#+END_SRC 

#+RESULTS:
: rm: epic_dir/: is a directory

Remember to use ~--recursive~ or just ~-r~ when deleting or copying directories.

** Basics: Piping and output redirection

In bash we have some important concepts:

 - ~STDIN~: What we write in our command. 
 - ~STDOUT~: What get prints.
 - ~STDERR~: We made a mistake, is the error.


#+CAPTION: Standard out in a nutshell
#+NAME: stdout
[[../imgs/std_streams.png]] 


Let's see how to use it: 

Download all the [[https://www.ncdc.noaa.gov/isd][Integrated Surface Climate] data from NOAA for the year 1990:

#+BEGIN_SRC bash :exports both
mkdir ~/epic_dir
cd epic_dir
wget https://www.ncei.noaa.gov/data/global-hourly/archive/csv/1991.tar.gz
#+END_SRC 

We downloaded a new compressed file with the same name of the URL file (check ~man wget~ to check
how to use a different name). To check the contents of our file, we can use the ~tar~ command to
list and extract the file contents. 

If we run: 

#+BEGIN_SRC bash :results output :exports both
tar -tvf ~/epic_dir/1991.tar.gz
#+END_SRC 

#+RESULTS:
#+begin_example
-rw-r--r--  0 0      0      925981 Jun  2  2017 01001099999.csv
-rw-r--r--  0 0      0      747988 Jun  2  2017 01001499999.csv
-rw-r--r--  0 0      0     1115107 Jun  2  2017 01001599999.csv
-rw-r--r--  0 0      0      708498 Jun  2  2017 01001699999.csv
-rw-r--r--  0 0      0      237514 Jun  2  2017 01001799999.csv
-rw-r--r--  0 0      0        2087 Jun  2  2017 99644099999.csv
-rw-r--r--  0 0      0        1066 Jun  2  2017 99647099999.csv
-rw-r--r--  0 0      0         793 Jun  2  2017 99658099999.csv
-rw-r--r--  0 0      0        1591 Jun  2  2017 99663099999.csv
-rw-r--r--  0 0      0        1699 Jun  2  2017 99633099999.csv
-rw-r--r--  0 0      0     3159048 Jun  2  2017 99999941406.csv
-rw-r--r--  0 0      0    54477294 Jun  2  2017 99999999999.csv
(...)
#+end_example

we will get a *really* long list. If we remember what we learn about just a few minutes ago, this
long list is the ~STDOUT~, we can pipe (~|~) this list to another command to filter the files we
want.

#+BEGIN_SRC bash :results output
tar -tvf ~/epic_dir/1991.tar.gz | head
#+END_SRC

#+RESULTS:
#+begin_example
-rw-r--r--  0 0      0      925981 Jun  2  2017 01001099999.csv
-rw-r--r--  0 0      0      747988 Jun  2  2017 01001499999.csv
-rw-r--r--  0 0      0     1115107 Jun  2  2017 01001599999.csv
-rw-r--r--  0 0      0      708498 Jun  2  2017 01001699999.csv
-rw-r--r--  0 0      0      237514 Jun  2  2017 01001799999.csv
-rw-r--r--  0 0      0      430791 Jun  2  2017 01003099999.csv
-rw-r--r--  0 0      0      368437 Jun  2  2017 01004099999.csv
-rw-r--r--  0 0      0     2528605 Jun  2  2017 01008099999.csv
-rw-r--r--  0 0      0      304582 Jun  2  2017 01015099999.csv
-rw-r--r--  0 0      0      180001 Jun  2  2017 01017099999.csv
#+end_example

We can also find specific files using ~grep~. In this case, let's extract the file contents and 
filter only a subset of [[ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-history.txt][stations]] starting by 62:

#+BEGIN_SRC bash :results output
mkdir ~/epic_dir/isd_data_1991
tar -C ~/epic_dir/isd_data_1991 -zxvf 1991.tar.gz
#+END_SRC

#+BEGIN_SRC bash :results output 
ls ~/epic_dir/isd_data_1991 | grep '^62' 
#+END_SRC

#+RESULTS:
#+begin_example
62002099999.csv
62007099999.csv
62008099999.csv
62010099999.csv
62012099999.csv
62016099999.csv
62019099999.csv
62053099999.csv
62055099999.csv
62056099999.csv
62059099999.csv
62062099999.csv
62103099999.csv
62120099999.csv
62124099999.csv
62131099999.csv
62941099999.csv
(...)
#+end_example

We can use another pipe to get the number of station starting with 62 (notice that the ~-l~ flag
tells the ~wc~ command to count lines):

#+BEGIN_SRC bash :results value
ls ~/epic_dir/isd_data_1991 | grep '^62' | wc -l
#+END_SRC

#+RESULTS:
: 68

Additionally, we can send all our types of ~STD~ ouputs to new files by using the redirection
functions: ~>~ and ~>>~ (we will see another ones later). Once we print the list of stations of
interest, is hard to copy and paste all the contents. We can save the results in a text file: 

#+BEGIN_SRC bash 
ls ~/epic_dir/isd_data_1991 | grep '^62' > ~/epic_dir/isd_stations_starting_62.txt
#+END_SRC  

If we check this file, we can see that the ~STDOUT~ of our last command is in our text file:

#+BEGIN_SRC bash :results output
head ~/epic_dir/isd_stations_starting_62.txt
#+END_SRC 

#+RESULTS:
#+begin_example
62002099999.csv
62007099999.csv
62008099999.csv
62010099999.csv
62012099999.csv
62016099999.csv
62019099999.csv
62053099999.csv
62055099999.csv
62056099999.csv
#+end_example


Let's assume that we also want all the stations that start with 70 in the same file. For this task
we can use the same formula we use above, but using ~>>~ instead: 

#+BEGIN_SRC bash :results output :exports both
ls ~/epic_dir/isd_data_1991 | grep '^70' >> ~/epic_dir/isd_stations_starting_62.txt
tail ~/epic_dir/isd_stations_starting_62.txt 
#+END_SRC

#+RESULTS:
#+begin_example
70387099999.csv
70388699999.csv
7039502532e.csv
70398025308.csv
70414099999.csv
70454025704.csv
70454599999.csv
70482025626.csv
70489099999.csv
70489899999.csv
#+end_example

Another valid approach would be to use the ~cat~ command to concatenate text files, and use ~>~ to
assign the output to a new file, but this approach is cleaner (we do not create additional files).
We have other types of redirection commands, but we will talk about them during the scripting part
of this tutorial. 

** Text wranggling and editing

Text editing is a big part of living in the command-line. Before checking how to write novels in our
terminal, let's first explore how to do simpler stuff. We have lots of CSVs in out ~isd_data_1991~.
Instead of using Excel or other tabular-format editor (I'm talking to you Stata), we can explore
them in the command-line.

We have already cover how ~cat~, ~head~, and ~tail~ are useful function to print lines, in this
case: 

#+BEGIN_SRC bash :results table :exports both
head -n 5  ~/epic_dir/isd_data_1991/01088099999.csv
#+END_SRC

#+RESULTS:
|    STATION | DATE                | SOURCE |   LATITUDE | LONGITUDE | ELEVATION | NAME      | REPORT_TYPE | CALL_SIGN | QUALITY_CONTROL | WND            | CIG         | VIS          | TMP     | DEW     | SLP     | AG1   | GA1                | GA2                | GA3 | MA1             | MW1  | OC1 | REM            | EQD              |
| 1088099999 | 1991-01-01T05:50:00 |      4 | 70.0666667 |     29.85 |      39.0 | VADSO, NO | FM-15       | ENVD      | V020            | 030,1,N,0036,1 | 00600,1,C,N | 011200,1,N,1 | -0080,1 | -0090,1 | 99999,9 | 2,000 | 01,1,+00300,9,07,9 | 05,1,+00600,9,08,9 |     | 10071,1,99999,9 | 26,1 |     |                |                  |
| 1088099999 | 1991-01-01T10:50:00 |      4 | 70.0666667 |     29.85 |      39.0 | VADSO, NO | FM-15       | ENVD      | V020            | 330,1,N,0026,1 | 00360,1,C,N | 011200,1,N,1 | -0080,1 | -0080,1 | 99999,9 | 2,999 | 03,1,+00240,9,07,9 | 05,1,+00360,9,07,9 |     | 10081,1,99999,9 |      |     |                | Q01+000000PRSWM2 |
| 1088099999 | 1991-01-01T13:50:00 |      4 | 70.0666667 |     29.85 |      39.0 | VADSO, NO | FM-15       | ENVD      | V020            | 300,1,N,0051,1 | 22000,1,C,N | 011200,1,N,1 | -0100,1 | -0100,1 | 99999,9 | 2,999 | 03,1,+00180,9,07,9 |                    |     | 10091,1,99999,9 |      |     | MET008SEAFOG S | Q01+000000PRSWM2 |
| 1088099999 | 1991-01-01T14:50:00 |      4 | 70.0666667 |     29.85 |      39.0 | VADSO, NO | FM-15       | ENVD      | V020            | 300,1,N,0041,1 | 22000,1,C,N | 011200,1,N,1 | -0100,1 | -0100,1 | 99999,9 | 2,000 | 04,1,+00180,9,07,9 |                    |     | 10091,1,99999,9 |      |     | MET008SEAFOG S | Q01+000000PRSWM2 |

But, we can pre-process data from the command-line. Here ~awk~, ~cut~, and other tools are relevant:

If we want to select only some columns, we can use the ~cut~ command. For example, let's get all
the report types and its timestamps:  

*Warning*: I will follow a die-hard unix way of doing this. As we will see later, some of these
tasks are easily tackled by using a real scripting laguage (like snake:). 

#+BEGIN_SRC bash :results output :exports both
sed 's/","/"|"/g' < ~/epic_dir/isd_data_1991/01001099999.csv | cut -d "|" -f 2,8 | head 
#+END_SRC

#+RESULTS:
#+begin_example
"DATE"|"REPORT_TYPE"
"1991-01-01T00:00:00"|"FM-12"
"1991-01-01T03:00:00"|"FM-12"
"1991-01-01T06:00:00"|"FM-12"
"1991-01-01T09:00:00"|"FM-12"
"1991-01-01T12:00:00"|"FM-12"
"1991-01-01T15:00:00"|"FM-12"
"1991-01-01T18:00:00"|"FM-12"
"1991-01-01T21:00:00"|"FM-12"
"1991-01-02T00:00:00"|"FM-12"
#+end_example


Here we are combining several concepts: 
 - We are directing the CSV file to the ~sed~ command that will search all comma separators and
   replace them by pipes: ~|~.
 - Later, we send that output to the ~cut~ command to filter out the columns of interest (2 and 8)
 - Print the head of the final output

We can also check unique values by using ~uniq~. In this case, we can answer the question for unique
report types in this station in 1991.   

#+BEGIN_SRC bash :results output :exports both
sed 's/","/"|"/g' < ~/epic_dir/isd_data_1991/01001099999.csv | cut -d "|" -f 8 | uniq
#+END_SRC

#+RESULTS:
: "REPORT_TYPE"
: "FM-12"

More advanced tasks in the command-line are available using ~awk~ or Python's ~csvkit~. The later is
extremely useful as a simple program to interact with CSV files. ~csvkit~ can transform, aggregate,
and query big datafiles without hassle, you can check the [[https://csvkit.readthedocs.io/en/latest/index.html][documentation ]]to learn more about it.

** Bash scripting: loops and conditionals 

Bash is not a formal programming language, but it has several control flow features, and the ability
of storing variables, just like any other language. Here we will explore two main control flows
relevant for creating bash scripts: loops and conditionals.

The definition of Bash variables is straight forward: ~var_name=var_content~. Variables are parsed
as text, unless we specified otherwise. Variables will be stored in the session environment, and can
be called again using the `$` sign before them: ~echo $varname~.

Having defined the variable definition, we can talk about how to use loops: 

#+BEGIN_SRC bash :results output :exports both
names='Ian Alice Lixi Sushant'
for name in $names
do
echo $name is learning how to use batch!
done 
#+END_SRC

#+RESULTS:
: Ian is learning how to use batch!
: Alice is learning how to use batch!
: Lixi is learning how to use batch!
: Sushant is learning how to use batch!

We can use ranges instead of variables to look (like ~range~ in Python). Ranges are defined using
curly braces: ~{1..5}~ is a range from 1 to 5. Additionally, you can use a step: ~{1..10..2}~ will
yield all multiples of 2 between 1 and 10. 

Now let's jump in to if-statements. Bash has several logic operators:
 
 - Variable comparison: ~=~ (equal), ~!=~ (different), ~-eq~ (numerically equal), ~-gt~ (>), ~-lt~ (<).
 - Files: ~-d~ (directory exists), ~e~ (file exists). 

Using our example above, we can print only a name we want:

#+BEGIN_SRC bash :results output :exports both
names='Ian Alice Lixi Sushant'
for name in $names
do
if [ $name = 'Alice' ]
then
echo $name is learning how to use batch!
fi
done 
#+END_SRC

#+RESULTS:
: Alice is learning how to use batch!

Although this is a simple case, we can add also a ~else~ or ~elif~ statement: 

#+BEGIN_SRC bash :results output :exports both
names='Ian Alice Lixi Sushant'
for name in $names
do
if [ $name = 'Alice' ]
then
echo $name is learning how to use batch!
else
echo $name is missing the fun
fi
done 
#+END_SRC

#+RESULTS:
: Ian is missing the fun
: Alice is learning how to use batch!
: Lixi is missing the fun
: Sushant is missing the fun

You can also combine logical statements with ~&&~ and ~||~. 

*** Some recommendations:
 - Be mindful that you should keep spaces between the brackets and the logic statement in the ~if~
   statements
 - For definiing variable do not leave a space between the ~=~ and the variable value
 - Write clean and indented code, it helps to readability (sorry for not doing it)

** Bash scripting: writing scripts!  

It's time to use all that we have learned! But first, let's talk about the structure of a bash
script.

1. Header: 

Bash files (as all coding files, should include a shebang and a docstring (a /fancy/ term for
documentation; you can comment bash files by using the pound: ~# This is a commment~). The shebang
is a line that tells the interpreter (the middle-man between our code and the computer) which
program should be used to run the code. 

#+BEGIN_SRC bash :results output
# This is a bash shebang:
#! /bin/bash
#! /bin/sh

# This is a Python shebang:
#! /usr/bin/python 
#+END_SRC

Here ~#!~ is telling the interpreter which program in the binaries of the system should use to read
and execute the code (this path must be always absolute). After declaring the shebang, we need to
tell other users (or your future self) what is the script doing. There is no common structure to
follow, but in general a good documentation should include: name of the script (a general name), a
good description with step-by-step processes, and the outcome. 

2. Arguments

Bash files, as any other scripts in other languages can take arguments. The arguments are defined as
a variable (remember the ~$~) and a number that also determines the order of the arguments. For
instance, let's create a bash file with the following contents and save it as ~im_awesome.sh~ 

#+BEGIN_SRC bash :results output
#! /bin/bash

NAME=$1

echo $NAME it's awesome!
#+END_SRC

2.1. File editing: we will use ~nano~ for now
2.2. Permissions: to run a script file in Bash, you need to give excecution permissions, we can add
those by using the `chmod` argument and appending executing powers: ~+x~ (hint: use ~ls -la~  to
check file permissions in a directory). 

Once the file is created we can run it: ~./im_awesome <your name>~, or another system variable:
~./im_awesome $(whoami)~. 

#+BEGIN_SRC bash :results output
~/epic_dir/im_awesome.sh $(whoami)
#+END_SRC

#+RESULTS:
: topcat it's awesome!





